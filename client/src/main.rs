pub mod aes;
pub mod utils;
pub mod hmac;
pub mod log;
pub mod challenge;
pub mod identify_db;
pub mod cts_cbc;
pub mod pbkdf2;
pub mod message;
pub mod rsaes_oaep;
pub mod auth;
pub mod send_receive;
pub mod sessions_information;

use std::net::TcpStream;
use std::sync::Arc;

use auth::auth_self;
use log::write_log;
use num_bigint::BigUint;
use num_traits::Num;
use rsaes_oaep::{key_generation, RsaKey};

fn main() -> std::io::Result<()> {
    println!("Start");
    
    //let rsa_key_challenge = Arc::new(key_generation());
    //let rsa_key_encryption = Arc::new(key_generation());
    
    let rsa_key_challenge = RsaKey {
        private_key: BigUint::from_str_radix("2535069872830079737313267579626100898758349324715983489922882824729001706952156682735018371948365969529836687778820882278297095261284146221266861082214133681560982361769892887036547805503683518800180289386175447147852992209360530462051500802943798684555951828919378598728577837972143181812898959459660525630579420611711225078951368037494332330003098937865436861745215333151041610004195894986815623272871903278278270977141120205406208767217005435640742620249918637171877392087095432327777645029849390571001187960095224761129311061390003754744046792357314916071049717142110263329667619667917884137409634171306731269241", 10).unwrap(),
        public_key: (BigUint::from_str_radix("11025341711836547597338882299154275307049302521329312494463864336337154746069645797093695603051301383308574358415328433331525431822866752332813476325241733299386960053309009896988136805978824525290823254728368191633740895243537134839171093511349640612498733493389695084270675278198974564103255631170467308265608103053954924100986611347411365684335487868236784636654021719610726940703946128905981183440513108065204595953299949582507872434266968372047455975015196387163727001821375249392926581449724451847959280688565073093105619123003498442587227605340433917443620454042418895993363827469366259568729933935686764855031", 10).unwrap(), BigUint::from(65537u32)),
    };
    let rsa_key_encryption = RsaKey {
        private_key: BigUint::from_str_radix("921220256127738864687839243931119302729841130376567970759078203233115135659105557530650330448180854427639597874427095239409490869588512109110028893552155851189575844735831020052601760390703968593838618163667070131315152218452621157184347095885547405086989271877129355616830714796143815702852839311417736222373713938516585567239035574635410766656751831996894507584057701106589187876714264914786713061245898212566790161194149370036154591777197248209358348080220651469079436685452452737003027222669996416530969958987235287243387055827533710235650043564376994883799284312676756632021079841951353303335497529821675583073", 10).unwrap(),
        public_key: (BigUint::from_str_radix("4736331052470669332003367108301072075233827423039863112860885557800946626319196746205870456309910461804676890711251944826639978278828141374028709782437250962533241714634985295456763283182361809816772693072271811029732574797264409882983490674123411021196047376716986473606357147218551600354425867259149931655092897048962260536135272343052187874684683167682885722202396661105318305852045095422320596537969265817984736937572722649341047279482832555310891292238597765747782336492908555113403279574714663899634621775256247814653334370143980457867759768698494609705332389485296836809046602285862686099718105788664681320143", 10).unwrap(), BigUint::from(65537u32)),
    };

    //println!("Challenge : {:?}", rsa_key_challenge);
    //println!("Encryption : {:?}", rsa_key_encryption);

    let mut stream = TcpStream::connect("127.0.0.1:7878")?;
    write_log("Connecté au serveur".to_owned());

    println!("Attached to server");

    let id = "42";
    
    if auth_self(&mut stream, id.to_string(), &rsa_key_challenge, &rsa_key_encryption) {
        write_log("Auth failed".to_owned());
        println!("Failed");
        return Ok(());
    }

    println!("OK");
    /*
    // Lire un message de l'entrée standard et l'envoyer au serveur
    let mut input = String::new();
    println!("Entrez un message : ");
    io::stdin().read_line(&mut input)?;

    stream.write_all(input.as_bytes())?;

    // Lire la réponse du serveur
    let mut buffer = [0; 512];
    let n = stream.read(&mut buffer)?;
    println!("Réponse du serveur : {}", String::from_utf8_lossy(&buffer[..n]));
    */
    Ok(())
}
